<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:c="http://www.springframework.org/schema/c"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:int="http://www.springframework.org/schema/integration"
  xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
  xmlns:rabbit="http://www.springframework.org/schema/rabbit"
  xmlns:task="http://www.springframework.org/schema/task"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
    http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
    http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

  <context:annotation-config />

  <context:property-placeholder
    location="classpath:META-INF/loader/loader.properties"
    system-properties-mode="OVERRIDE"/>

  <bean id="groupSize" class="java.lang.Integer">
    <!-- set group size to pseudo-random number between group-size-low and group-size-high (inclusive) -->
    <constructor-arg value="#{new java.util.Random().nextInt((${config.group-size-high} - ${config.group-size-low}) + 1) + ${config.group-size-low}}"/>
  </bean>

  <!-- Channels, routing and transformation -->

  <int:channel id="sqlAggregateChannel"/>

  <int:channel id="toDatabaseChannel">
    <int:interceptors>
      <ref bean="messageCounter" />
    </int:interceptors>
  </int:channel>

  <bean id="messageCounter"
    class="net.mgrid.tranzoom.monitoring.MessageCounter"
    p:processType="loader"
    p:rabbitTemplate-ref="monitoringTemplate"
    />

  <task:executor id="taskExecutor"
    pool-size="10"
    queue-capacity="100"
    rejection-policy="CALLER_RUNS"
    />

  <task:scheduler id="taskScheduler" pool-size="1"/>

  <task:scheduled-tasks scheduler="taskScheduler">
    <task:scheduled ref="messageCounter" method="publish" fixed-delay="5000"/>
  </task:scheduled-tasks>

  <!-- Global error channel and handler -->

  <bean id="errorHandler"
    class="net.mgrid.tranzoom.error.GlobalErrorHandler"
    p:publishErrorChannel-ref="publishErrorChannel"
    />

  <int:channel id="errorChannel" />
  <int:channel id="publishErrorChannel" />

  <int:service-activator id="globalErrorHandler"
    input-channel="errorChannel"
    ref="errorHandler"/>

  <!--
    To keep state the aggregator uses an in-memory map by default.
    For the correlation strategy we use a constant expression because in the current implementation
    there is no discrimination between messages (i.e. all belong to the same group).
  -->

  <int:aggregator id="aggregator"
    input-channel="sqlAggregateChannel"
    output-channel="toDatabaseChannel"
    message-store="aggregatorStore"
    method="aggregate"
    send-partial-result-on-expiry="true"
    correlation-strategy-expression="1"
    release-strategy-expression="size() == #{@groupSize}"
    expire-groups-upon-completion="true">

    <bean class="net.mgrid.tranzoom.ccloader.AggregatorLogicProcessor" />
  </int:aggregator>

  <bean id="aggregatorStore"
    class="org.springframework.integration.store.SimpleMessageStore"
    />

  <int:service-activator
    id="loader"
    input-channel="toDatabaseChannel">

    <bean class="net.mgrid.tranzoom.ccloader.Loader"
      p:pondUploadScript="${config.pond.uploadscript}"
      p:pondHost="${config.pond.dbhost}"
      p:pondPort="${config.pond.dbport}"
      p:pondDatabase="${config.pond.dbname}"
      p:pondUser="${config.pond.dbuser}"
      p:lakeHost="${config.lake.dbhost}"
      p:lakePort="${config.lake.dbport}"
      p:lakeDatabase="${config.lake.dbname}"
      p:lakeUser="${config.lake.dbuser}"
      />
  </int:service-activator>

  <!-- RabbitMQ infrastructure -->

  <rabbit:connection-factory id="consumeConnectionFactory"
    host="${config.rabbitmq.host}"
    port="${config.rabbitmq.port}"
    username="${config.rabbitmq.user}"
    password="${config.rabbitmq.password}"
    virtual-host="/messaging"
    executor="taskExecutor"
    />

  <rabbit:connection-factory id="publishConnectionFactory"
    host="${config.rabbitmq.host}"
    port="${config.rabbitmq.port}"
    username="${config.rabbitmq.user}"
    password="${config.rabbitmq.password}"
    virtual-host="/messaging"
    executor="taskExecutor"
    publisher-returns="true"
    />

  <rabbit:connection-factory id="monitoringConnectionFactory"
    host="${config.rabbitmq.host}"
    port="${config.rabbitmq.port}"
    username="${config.rabbitmq.user}"
    password="${config.rabbitmq.password}"
    virtual-host="/monitoring"
    executor="taskExecutor"
    publisher-returns="true"
    />

  <rabbit:template id="monitoringTemplate"
    connection-factory="monitoringConnectionFactory"
    channel-transacted="false"
    encoding="UTF-8"
    />

  <bean id="rabbitTxAttribute"
    class="org.springframework.transaction.interceptor.DefaultTransactionAttribute"
    />

  <bean id="rabbitTxManager"
    class="org.springframework.amqp.rabbit.transaction.RabbitTransactionManager"
    p:connectionFactory-ref="consumeConnectionFactory"
    p:transactionSynchronization="#{T(org.springframework.transaction.support.AbstractPlatformTransactionManager).SYNCHRONIZATION_ON_ACTUAL_TRANSACTION}"
    />

  <bean id="synchronizationActivatingInterceptor"
    class="net.mgrid.tranzoom.rabbitmq.SynchronizationActivatingInterceptor"
    p:transactionSynchronization-ref="loaderSynchronization"
    />

  <bean id="loaderSynchronization"
    class="net.mgrid.tranzoom.rabbitmq.LoaderSynchronization"
    p:messageStore-ref="aggregatorStore"
    />

  <int-amqp:inbound-channel-adapter id="inboundAdapter"
    channel="sqlAggregateChannel"
    error-channel="errorChannel"
    mapped-request-headers="tz-ingress-timestamp"
    listener-container="inboundListenerContainer"
    />

  <!--
       IMPORTANT: concurrent consumers should 1 because we have to make sure all
       aggregated messages are part of the same (thread-bound) transaction.
  -->

  <bean id="inboundListenerContainer"
    class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer"
    p:connectionFactory-ref="consumeConnectionFactory"
    p:channelTransacted="true"
    p:adviceChain="#{new org.aopalliance.aop.Advice[]{@synchronizationActivatingInterceptor}}"
    p:acknowledgeMode="AUTO"
    p:errorHandler-ref="errorHandler"
    p:exposeListenerChannel="true"
    p:queueNames="transform-sql"
    p:concurrentConsumers="1"
    p:defaultRequeueRejected="false"
    p:prefetchCount="#{2 * @groupSize}"
    p:receiveTimeout="1000"
    p:recoveryInterval="5000"
    p:shutdownTimeout="5000"
    p:taskExecutor-ref="taskExecutor"
    p:transactionAttribute-ref="rabbitTxAttribute"
    p:transactionManager-ref="rabbitTxManager"
    p:txSize="#{@groupSize}"
    />

  <!--
       The mandatory flag is not set because the behaviour of tx is not defined otherwise,
       see https://www.rabbitmq.com/amqp-0-9-1-reference.html#class.tx
  -->

  <rabbit:template id="errorTemplate"
    connection-factory="publishConnectionFactory"
    channel-transacted="true"
    encoding="UTF-8"
    />

  <int-amqp:outbound-channel-adapter
    id="errorOutboundAdapter"
    channel="publishErrorChannel"
    amqp-template="errorTemplate"
    exchange-name="errors"
    routing-key="sql"
    />

</beans>
